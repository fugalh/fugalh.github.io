---
layout: post
status: publish
published: true
title: Qt4
author: Hans
author_login: fugalh
author_email: hans@fugal.net
author_url: http://hans.fugal.net/
wordpress_id: 765
wordpress_url: urn:uuid:a3ee29ee-9f0d-4b87-b389-b10c9e7678c3
date: 2006-12-13 08:27:00.000000000 -08:00
tags:
- cs
- qt
- qt3
- qt4
- gui
comments: []
---
<p>Back when Qt 4 was released, I watched <a href="http://www.trolltech.com/company/newsroom/press-kit/qt4dance">"The Qt 4 Dance"</a>. It's silly, catchy, and, well, cute. Somehow the mp3 got wedged in my iTunes and I've heard it a few more times since then. Not the worst song in the world, but I wish I could get rid of it.</p>

<p>What I don't wish is to get rid of Qt 4. I didn't actually look at Qt 4 until a few weeks ago. I didn't believe that Qt 4 could solve all my problems, no matter how great it was for Jean-Claude. When I had to do any GUI programming, I was happy with Qt 3. </p>

<p>With the move to the MacBook, Qt and qtruby needed installing, and I decided I might as well install the Qt 4 versions. <a href="http://www.trolltech.com/developer/downloads/qt/mac">Qt 4 for OS X</a> is much improved just in the distribution and packaging. <a href="http://developer.kde.org/language-bindings/ruby/index.html">qt4-qtruby</a> is slightly easier to install than the Qt3 version, but it still needs some packaging work. Finally I had gotten qt4-qtruby installed and then I tried to fire up <a href="http://neelix.rubyforge.org/">Neelix</a> and discovered Qt4 doesn't just run Qt3 code automatically.</p>

<p>So I investigated a bit and decided to port to Qt 4. It was a bit of a long process, and perhaps a bit painful, but it was like the muscle soreness you get after a good workout. At the end I didn't feel like "what a complete waste of time", but excited for the new possibilities. </p>

<p>You see, the major differences between Qt 3 and Qt 4 are architectural. Some stupidity has been replaced with elegance. Believe me, refactoring your code to use the new Model/View framework for tables, tree views, etc. instead of the old item-based tree and table views is an exhilerating experience. The old way is klunky. The new way is elegant. If I had to pick one reason to prefer Qt 4, that would be it.</p>

<p>But there are other great changes too. Take a look at the <a href="http://doc.trolltech.com/4.2/qt4-intro.html">What's New in Qt 4</a> page. I'll just rattle off a few of my favorites: a better main window class, Qt Designer improvements, integrated SVG support, PDF printing backend, unit testing framework, syntax highlighting class, splitting things up into modules (this should make gentoo users giddy), C++ namespaces, OS X improvements, a Calendar widget, a text completion framework, an undo framework, it's open source on all three platforms, and much more.</p>

<p>Another favorite change isn't on that page, but deserves mention. In the old days you'd design a window with Qt Designer and then you'd have to do klunky things like subclass widgets to get all the functionality. I never really liked that. Qt 4 takes a much more elegant approach, IMHO. You can still subclass if you're an OO freak, but that is deprecated. <code>uic</code> now hands you a <acronym title="I have no idea">POD</acronym> class which will populate a given QWidget for you. So in my code I create an instance of this POD thing, create a main window widget, then pass my widget to the POD's <code>setupUi()</code> function. Et voil√°, I have a populated main window. No subclassing. I can access all the widgets as members of the POD.</p>

<p>If you're in C++ and thinking of porting your code to Qt 4 it's not as much work as I led you to believe above. Qt 4 has a compatibility layer and an automagic tool to convert your Qt 3 code to Qt 4 code (and Qt Designer and/or <code>uic</code> will convert your <code>.ui</code> files). qtruby users will need to just port it, because qtruby doesn't support the compatibility layer for reasons I reluctantly agree with.</p>

<p>So in the end, Qt 4 *is* worth dancing about. Fancy that.</p>
