---
layout: post
status: publish
published: true
title: Log-frequency Spectrograms
author: Hans
author_login: fugalh
author_email: hans@fugal.net
author_url: http://hans.fugal.net/
wordpress_id: 1069
wordpress_url: http://hans.fugal.net/blog/?p=1069
date: '2009-01-21 23:01:14.000000000 -08:00'
tags:
- audio
- cs
- dsp
- octave
- matlab
- fft
- frequency
- log
- logfsgram
- spectrogram
- specgram
comments:
- id: 2273
  author: saiph
  author_email: saiph@cs.ucsb.edu
  author_url: http://littlesaiph.blogspot.com
  date: '2010-06-27 21:18:30 -0700'
  date_gmt: '2010-06-27 21:18:30 -0700'
  content: "thanks! your post saved my life! I couldn't find where the m-files for
    specgram was! \r\nnice blog!\r\ncheers!"
- id: 2462
  author: Richard Mathie
  author_email: richard.mathie@cantab.net
  author_url: ''
  date: '2011-12-19 21:00:59 -0800'
  date_gmt: '2011-12-19 21:00:59 -0800'
  content: "It seams specgram is already in the octave 3.2 signal package but logfsgram
    isn't, so i copied your function over however\r\n\r\nwhen using even N, i seem
    to get an error in logfsgram\r\nerror: operator *: nonconformant arguments (op1
    is 126x6, op2 is 5x98)\r\nerror: evaluating argument list element number 1\r\nerror:
    evaluating argument list element number 1\r\nerror: called from: logfsgram.m at
    line 77, column 3\r\n\r\nI changed the lines:\r\n% Freqs corresponding to each
    bin in FFT\r\nfftfrqs = [0:floor((N+1)/2)-1]*(SR/N);\r\nnfftbins = floor((N+1)/2);\r\n\r\ni.e.
    from ceil to floor\r\nand now it sort of works, ?!\r\n\r\nugh don't you just hate
    having to work out if i have the right number of bins in your frequency space.\r\n\r\nNice
    post though,"
---
<a href="http://www.zmonkey.org/blog/">Tensai</a> asked me how I made my graphs in <a href="http://hans.fugal.net/blog/2009/01/21/ringtones">my ringtones post</a>. I'd like to blather on about the graphs and why they're cool and how you can make them, because that's the sort of thing I'm good at.

In the olden days, <a href="http://ccrma-www.stanford.edu/~jos/st/Spectrograms.html">the spectrogram</a> was invented. 

<img src="http://ccrma-www.stanford.edu/~jos/st/img1522.png" alt="spectrogram of speech" />

Originally greyscale, they are now usually portrayed in color, with "hot" colors meaning higher amplitude and "cool" colors meaning lower amplitude.

While there are myriad ways to view and/or generate spectrograms, the most convenient for me right now is to do it in <a href="http://www.gnu.org/software/octave/">Octave</a>. If you're not familiar with Octave, it's a <a href="http://www.mathworks.com/products/matlab/">MATLAB</a> clone. Octave is libre, MATLAB is insanely expensive. Obviously, I use Octave. I have used MATLAB previously (I had a beta copy, until it left beta), and for the most part they are quite comparable. Octave is a bit slower for some things (less optimized) but I've seen Octave outperform MATLAB on some specific tasks. The biggest impedance mismatch is in user interface stuff (MATLAB has sophisticated dialog support) and graphing. Octave has most of the essential graphing functionality (it uses gnuplot to render graphs).

So how do we generate a spectrogram in Octave? First we need to read in the WAV file, then we generate the spectrogram.

<pre><code>
[x,sr] = wavread('logchirp.wav');
specgram(x,8192,sr);
</code></pre>

8192 is the size of the FFT. I find 8192 is a nice compromise between time and frequency resolution (and computation time), but other powers of 2 (especially 1024) are common as well. Here's the chirp spectrogram:

<a href="http://hans.fugal.net/images/chirp-specgram.pdf"><img src="http://hans.fugal.net/images/chirp-specgram.jpg" alt="chirp spectrogram" /></a>

Notice how the chirp is logarithmic. To our ears, this sounds like a steadily-rising tone. For this reason when dealing with music it's often better to look at a log-frequency spectrogram. Otherwise all the low frequencies are scrunched together and the relationships between different pitches (and harmonics) aren't constant. Here's a log-frequency spectrogram of the same chirp:

<a href="http://hans.fugal.net/images/logchirp.pdf"><img src="http://hans.fugal.net/images/logchirp.jpg" alt="log-frequency spectrogram of chirp" /></a>

This was generated by the Octave code

<pre><code>logfsgram(x,8192,sr); title('logchirp.wav');</code></pre>

Notice the bleed on the low frequencies, this is because we need a longer FFT in order to get more frequency resolution at low frequencies. This is a tradeoff in time resolution though, and processor time. Experiment with different FFT lengths for extra credit.

To use these functions you'll need to put the <a href="http://hans.fugal.net/src/octave/specgram.m"><code>specgram</code></a> and <a href="http://hans.fugal.net/src/octave/logfsgram.m"><code>logfsgram</code></a> "m-files" in your octave search path (current directory or whatever else you specify in your <code>~/.octaverc</code>).
